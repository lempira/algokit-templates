name: "Build Demo Sites"
description: "Builds frontend demo sites"

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install dependencies
      shell: bash
      run: |
        pipx install algokit
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Parse examples and build frontends
      shell: bash
      run: |
        # Save the current absolute path as root path
        ROOT_DIR=$(pwd)
        # Create a directory for all builds
        mkdir -p dist

        # Get repository name for base path
        REPO_NAME=${GITHUB_REPOSITORY#*/}

        # Read examples.yml and filter frontend examples
        FRONTEND_EXAMPLES=$(yq e '.examples | map(select(.type == "frontend"))' examples/examples.yml)

        # Process each frontend example as a complete object
        echo "$FRONTEND_EXAMPLES" | yq e -o=json -I=0 '.' - | jq -r '.[] | @json' | while read -r example; do
          ID=$(echo "$example" | jq -r '.id')
          REPO_PATH=examples/$ID

          echo "Building frontend example: $ID with path $REPO_PATH"

          
          # Navigate to example directory and build
          cd "$REPO_PATH" || exit 1

          # Check for projects folder and navigate to frontend project if it exists
          if [ -d "projects" ]; then
            echo "Projects folder found, looking for frontend project..."
            FRONTEND_DIR=$(find projects -maxdepth 1 -type d -name "*-frontend" | head -n 1)
            if [ -n "$FRONTEND_DIR" ]; then
              echo "Found frontend directory: $FRONTEND_DIR"
              cd "$FRONTEND_DIR" || exit 1
            else
              echo "Error: No directory ending with '-frontend' found in projects folder"
              exit 1
            fi
          else
            echo "No projects folder found, continuing with current directory"
          fi

          # Add BASE_PATH environment variable for the build
          export BASE_PATH="/${REPO_NAME}/${ID}"
          export NEXT_PUBLIC_BASE_PATH=$BASE_PATH
          npm install
          npm run build

          # # Move build output to dist directory
          mkdir -p "$ROOT_DIR/dist/$ID"
          mv dist/* "$ROOT_DIR/dist/$ID/"

          # # Return to root using saved absolute path
          cd "$ROOT_DIR"
        done
        ls -la "$ROOT_DIR/dist"

        # Copy the index.html from examples to dist
        cp examples/index.html dist/

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist
